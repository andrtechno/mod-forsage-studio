<?php

namespace panix\mod\forsage\commands;

use panix\mod\forsage\components\ProductByIdQueue;
use panix\mod\forsage\components\ProductDeleteQueue;
use panix\mod\shop\models\AttributeOption;
use panix\mod\shop\models\Brand;
use panix\mod\shop\models\Category;
use panix\mod\shop\models\ProductAttributesEav;
use panix\mod\shop\models\ProductCategoryRef;
use panix\mod\shop\models\ProductImage;
use panix\mod\shop\models\Supplier;
use Yii;
use panix\mod\forsage\components\ForsageStudio;
use panix\engine\CMS;
use panix\engine\console\controllers\ConsoleController;
use panix\mod\shop\models\Attribute;
use panix\mod\shop\models\Product;
use panix\mod\shop\components\ExternalFinder;
use yii\base\ErrorException;
use yii\console\ExitCode;
use yii\console\widgets\Table;
use yii\helpers\BaseFileHelper;
use yii\helpers\Console;
use yii\helpers\FileHelper;
use yii\httpclient\Client;


ignore_user_abort(1);
set_time_limit(0);

/**
 * Class LoadController
 * @property ExternalFinder $external
 * @package panix\mod\forsage\commands
 */
class LoadController extends ConsoleController
{
    public $tempDirectory = '@runtime/forsage';
    /**
     * @var ForsageStudio
     */
    private $fs;

    public function beforeAction($action)
    {
        if (!extension_loaded('intl')) {
            throw new ErrorException('PHP Extension intl not active.');
        }
        $forsageClass = Yii::$app->getModule('forsage')->forsageClass;
        $this->fs = new $forsageClass;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionDeleted($sec = 3600){
        $now = time();
        $pts = $this->fs->getDelete($now - $sec, $now);

        if($pts['success'] == 'true'){
            if($pts['items']){
                $ids = array_column($pts['items'],'id');

                if (Yii::$app->settings->get('forsage', 'push_delete') == 'out_stack') {
                    Product::updateAll(['availability' => Product::STATUS_OUT_STOCK], ['forsage_id' => $ids]);
                } else { //delete
                    $prods = Product::find()->select(['forsage_id'])->where(['forsage_id'=>$ids])->asArray()->all();
                    foreach ($prods as $product) {
                        Yii::$app->queue->push(new ProductDeleteQueue([
                            'forsage_id' => $product['forsage_id'],
                        ]));
                    }
                }
            }
        }
    }

    /**
     * Информация о товаре: "forsage/load/product <id>"
     * @param $id
     * @param $before_delete Delete before product
     * @return bool
     */
    public function actionProduct($id, $before_delete = 0)
    {
        if ($before_delete) {
            $p = Product::findOne(['forsage_id' => $id]);
            $p->delete();
        }
        $product = $this->fs->getProduct($id);
        print_r($product->product);die;
        //print_r($product->getProductProps($product->product));die;
        if ($product) {
            echo 'exec';
            die;
            $response = $product->execute();
        } else {
            echo 'no open product';
        }
        return $response;
    }

    public static function log($mssage)
    {
        Yii::info($mssage);
    }

    /**
     * Экспорт всех поставщиков их контактов
     * @param string $delimiter default ";"
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    public function actionExportContacts($delimiter = ';')
    {
        $suppliers = $this->fs->getSuppliers();

        foreach ($suppliers as $supplier) {
            $list[] = [$supplier['company'], str_replace('+', '', CMS::phoneFormat($supplier['phone'])), $supplier['phone'], $supplier['email'], $supplier['address']];
        }
        asort($list);
        $fp = fopen(Yii::getAlias('@runtime/') . 'suppliers_contact.csv', 'w');
        fputcsv($fp, ['Имя', 'Телефон', 'Телефон формат', 'E-mail', 'Адрес'], $delimiter);
        foreach ($list as $fields) {
            fputcsv($fp, $fields, $delimiter);
        }
        fclose($fp);
    }




    public function actionDiffSupplier()
    {

        $suppliers = $this->fs->getSuppliers();
        $cur_suppliers = Supplier::find()->where('`forsage_id` IS NOT NULL')->all();

        $forsage_list = [];
        $cur_forsage_list = [];
        foreach ($suppliers['suppliers'] as $supplier) {

            $forsage_list[] = $supplier['id'];
        }

        foreach ($cur_suppliers as $supplier) {
            if ($supplier->forsage_id) {
                $cur_forsage_list[] = $supplier->forsage_id;
            }
        }

        //$res1 = array_intersect($forsage_list, $cur_forsage_list);
        $res2 = array_diff($cur_forsage_list, $forsage_list);

        foreach ($res2 as $supplier_id) {
            $sup = Supplier::findOne(['forsage_id' => $supplier_id]);
            if ($sup) {
                $products = Product::findAll(['supplier_id' => $sup->id]);
                foreach ($products as $product) {
                    $product->delete();
                }
                $sup->delete();
            }

        }
    }

}

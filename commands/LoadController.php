<?php

namespace panix\mod\forsage\commands;


use panix\mod\forsage\components\ProductQueue;
use panix\mod\forsage\components\ProductQueue2;
use panix\mod\shop\components\ProductPriceHistoryQueue;
use panix\mod\shop\models\Brand;
use panix\mod\shop\models\Supplier;
use Yii;
use panix\mod\forsage\components\ForsageStudio;
use panix\engine\CMS;
use panix\engine\console\controllers\ConsoleController;
use panix\mod\shop\models\Attribute;
use panix\mod\shop\models\AttributeOption;
use panix\mod\shop\models\Product;
use panix\mod\shop\models\Category;
use panix\mod\shop\components\ExternalFinder;
use yii\console\ExitCode;
use yii\console\widgets\Table;
use yii\helpers\BaseFileHelper;
use yii\helpers\Console;
use yii\helpers\FileHelper;
use yii\helpers\Url;
use yii\httpclient\Client;


ignore_user_abort(1);
set_time_limit(0);

/**
 * Class LoadController
 * @property ExternalFinder $external
 * @package panix\mod\forsage\commands
 */
class LoadController extends ConsoleController
{
    public $tempDirectory = '@runtime/forsage';
    /**
     * @var ForsageStudio
     */
    private $fs;

    public function beforeAction($action)
    {
        $this->fs = new ForsageStudio();
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionBrands()
    {

        foreach ($this->fs->getBrands() as $brand) {
            $brandModel = Brand::find()->where(['slug' => CMS::slug($brand['name'])])->one();
            if ($brandModel) {
                $brandModel->forsage_id = $brand['id'];
                $brandModel->save(false);
            }
            // print_r($brand['name']);
        }
        die;
    }

    /**
     * Информация о товаре: "forsage/load/product <id>"
     * @param $id
     */
    public function actionProduct($id)
    {
        $product = $this->fs->getProduct($id);
        $response = $product->execute();

        //die;
        //$response = $this->fs->getProduct($id)->execute();
        print_r($response);


die;
        return $response;

        $explode = explode('-', '37-42');
        $size_min = (int)$explode[0];
        $size_max = (int)$explode[1];
        $list2 = [
            '0-20' => 'до 20',
            '20-25' => '20-25',
            '26-31' => '26-31',
            '27-32' => '27-32',
            '31-36' => '31-36',
            '32-37' => '32-37',
            '36-41' => '36-41',
            '39-44' => '39-44',
            '40-45' => '40-45',
            '41-46' => '41-46',
            '45-99' => 'более 45'
        ];

        $list = [
            '45-99' => 'более 45',
            '41-46' => '41-46',
            '40-45' => '40-45',
            '39-44' => '39-44',
            '36-41' => '36-41',
            '32-37' => '32-37',
            '31-36' => '31-36',
            '27-32' => '27-32',
            '26-31' => '26-31',
            '20-25' => '20-25',

        ];
        foreach ($list as $key => $l) {
            $liste = explode('-', $key);

            if (in_array($size_min, range($liste[0], $liste[1]))) {
                // $result = in_array($size_min, range($liste[0], $liste[1]));
                echo $l;
                break;
            }
        }
    }

    /**
     * Изменение товаров
     * @param int $diff Example milliseconds "86400" (Default 3600 hour)
     */
    public function actionChanges($diff = 3600)
    {
        $diff = eval('return ' . $diff . ';');
        $response = $this->fs->getChanges($diff);

        if ($response) {
            $count = count($response['product_ids']);
            $i = 0;

            Console::startProgress($i, $count, ' - ', 100);
            foreach ($response['products'] as $index => $product) {
                $this->fs->product = $product;
                //print_r($this->fs);die;
                $result = $this->fs->execute();
                //print_r($result);
                /*$product = $this->fs->getProduct($product);
                if($product){
                    $product->execute();
                }*/
                $i++;
                Console::updateProgress($i, $count, ' - ');

            }
            Console::endProgress(false);
        }
    }

    public function actionChanges2($start = 3600, $end = 0)
    {
        $start = eval('return ' . $start . ';');
        $end = eval('return ' . $end . ';');
        //for CRON
        $end_date = time() - $end;
        $start_date = time() - $start;

        //products = "full" or "changes"
        Yii::$app->controller->stdout('end: ' . date('Y-m-d H:i:s', $end_date) . PHP_EOL, Console::FG_GREEN);
        Yii::$app->controller->stdout('start: ' . date('Y-m-d H:i:s', $start_date) . PHP_EOL, Console::FG_GREEN);
        Yii::$app->controller->stdout('Loading...' . PHP_EOL, Console::FG_GREEN);

        $response = $this->fs->getChanges2($start, $end);

        if ($response) {
            $count = count($response['product_ids']);
            $i = 0;

            Console::startProgress($i, $count, ' - ', 100);
            foreach ($response['product_ids'] as $index => $product) {
                $product2 = $this->fs->getProduct($product);
                //print_r($product);die;
                if ($product2) {
                    $product2->execute();
                }
                $i++;
                Console::updateProgress($i, $count, $product . ' - ');

            }
            Console::endProgress(false);
        }
    }

    /**
     * Изменение товаров (forsage/load/changes-supplier <SUPPLIER_ID> <START> <END> --interactive=1|0)
     *
     * @param int $supplier Forsage supplier id
     * @param int $start Example milliseconds "86400 or 3600*2" (Default 3600)
     * @param int $end Example milliseconds "86400 or 3600*2" (Default 0) Furmula ($end - $start)
     */
    public function actionChangesSupplier($supplier, $start = 3600, $end = 0)
    {
        $start = eval('return ' . $start . ';');
        $end = eval('return ' . $end . ';');
        $end_date = time() + $end;
        $start_date = time() - $start;

        //$this->stdout('Current date: ' . date('Y-m-d H:i:s', time()).PHP_EOL, Console::FG_BLUE);
        //$this->stdout('Start date: ' . date('Y-m-d H:i:s', $start_date).PHP_EOL, Console::FG_PURPLE);
        //$this->stdout('End date: ' . date('Y-m-d H:i:s', $end_date).PHP_EOL, Console::FG_PURPLE);

        $table = new Table();


        echo $table //->setHeaders(['Current date', 'Start date', 'End date'])
        ->setRows([
            ['Current date', date('Y-m-d H:i:s', time())],
            ['Start date', date('Y-m-d H:i:s', $start_date)],
            ['End date', date('Y-m-d H:i:s', $end_date)],
        ])
            ->run();

        $confirmMsg = '';
        $confirmMsg .= "Starting confirm: says (yes|no)\r\n";

        // confirm
        $confirm = $this->confirm($confirmMsg, false);


        if ($confirm) {
            $response = $this->fs->getChanges($start, $end);
            if ($response) {
                $count = Product::find()->where(['forsage_id' => $response['product_ids']])->count();
                $i = 0;

                Console::startProgress($i, $count, ' - ', 100);
                foreach ($response['products'] as $index => $item) {
                    if ($item['supplier']['id'] == $supplier) {
                        $this->fs->product = $item;
                        $result = $this->fs->execute();
                        $i++;
                        Console::updateProgress($i, $count, $item['vcode'] . ' - ');
                    }
                }
                Console::endProgress(false);
            }
        } else {
            echo "\r\n";
            $this->stdout("--- Cancelled! ---\r\nYou can specify the paths using:");
            echo "\r\n\r\n";
            $this->stdout("    php cmd forsage/load/<action> <supplier_id> --interactive=1|0", Console::FG_BLUE);
            echo "\r\n";

            return ExitCode::OK;
        }

    }


    public function actionProducts($start = 3600, $end = 0)
    {
        $start = eval('return ' . $start . ';');
        $end = eval('return ' . $end . ';');
        $end_date = time() - $end;
        $start_date = time() - $start;

        $this->stdout('start: ' . date('Y-m-d H:i:s', $start_date) . PHP_EOL, Console::FG_GREEN);
        $this->stdout('end: ' . date('Y-m-d H:i:s', $end_date) . PHP_EOL, Console::FG_GREEN);
        $this->stdout('Loading...' . PHP_EOL, Console::FG_GREEN);

        $response = $this->fs->getProducts($start, $end);

        if ($response) {
            $i = 0;
            $count = count($response);
            Console::startProgress($i, $count, ' - ', 100);
            foreach ($response as $index => $item) {
                $this->fs->product = $item;
                $execute = $this->fs->execute();
                $i++;
                Console::updateProgress($i, $count, $item['id'] . ' - ');
            }
            Console::endProgress(false);
        }else{
            echo 'response empty';
        }
    }

    /**
     * Получить все товары поставщика forsage/load/supplier-products 123
     * @param $id
     */
    public function actionSupplierProducts($id)
    {
        $response = $this->fs->getSupplierProductIds($id, ['quantity' => 1]);
        if ($response) {

            $count = count($response);
            $i = 0;
            Console::startProgress($i, $count, ' - ', 100);
            foreach ($response as $index => $item) {
                $product = $this->fs->getProduct($item);
                self::log('get product');
                $product->execute();
                self::log('end product');
                $i++;
                Console::updateProgress($i, $count, ' - ');
            }
            Console::endProgress(false);
        }

    }

    public function actionIndex()
    {
        $list = $this->fs->getSupplierProductIds(448, ['quantity' => 1]);
        $count = count($list);
        $i = 0;
        Console::startProgress($i, $count, ' - ', 100);
        foreach ($list as $index => $item) {
            $product = $this->fs->getProduct($item);

            $product->execute();

            $i++;
            Console::updateProgress($i, $count, ' - ');
        }
        Console::endProgress(false);
    }

    private function generateCategory___($product)
    {
        $categoryName = '';
        if ($product['category']) {
            $categoryName = $product['category']['name'];
            if (isset($product['category']['child'])) {
                $categoryName .= '/' . $product['category']['child']['name'];
            }
        }
        return $categoryName;
    }


    public $replacesDirsName = array('.', ' ');

    public function getOptionsProduct__($characteristics, $changes = 0)
    {

        $result = [];
        // $result['image'] = false;
        $result['hasError'] = true;
        $result['errors'] = [];
        $result['images'] = [];
        //$sex = false;
        //$type = false;

        foreach ($characteristics as $characteristic) {
            if ($characteristic['name'] == 'Фото 1') {
                $result['hasError'] = false;
                $result['image'] = $characteristic['value'];
                $result['images'][] = $characteristic['value'];
            }
            if ($characteristic['name'] == 'Фото 2') {
                $result['hasError'] = false;
                $result['image'] = $characteristic['value'];
                $result['images'][] = $characteristic['value'];
            }
            if ($characteristic['id'] == 8) { // Пар в ящике
                $result['in_box'] = $characteristic['value'];
            }
            if ($characteristic['name'] == 'Поставщик') {
                $result['supplier_name'] = $characteristic['value'];
                $result['supplier_id'] = $characteristic['id'];
            }

            if ($characteristic['name'] == 'Цена продажи') {
                $result['price'] = $characteristic['value'];
            }
            if ($characteristic['name'] == 'Цена закупки') {
                $result['price_purchase'] = $characteristic['value'];
            }
            if ($characteristic['name'] == 'Размерная сетка') {
                $result['size'] = str_replace(' - ', '-', $characteristic['value']);
            }

            if ($characteristic['name'] == 'Цвет') {
                if (!empty($characteristic['value'])) {
                    $result['color'] = $characteristic['value'];
                }
            }
            if ($characteristic['name'] == 'Материал изделия') {
                if (!empty($characteristic['value'])) {
                    $result['material_ware'] = $characteristic['value'];
                }
            }
            if ($characteristic['name'] == 'Материал подкладки') {
                if (!empty($characteristic['value'])) {
                    $result['material_lining'] = $characteristic['value'];
                }
            }
            if ($characteristic['name'] == 'Материал подошвы') {
                if (!empty($characteristic['value'])) {
                    $result['material_foot'] = $characteristic['value'];
                }
            }
            if ($characteristic['name'] == 'Страна') {
                if (!empty($characteristic['value'])) {
                    $result['country'] = $characteristic['value'];
                }
            }


            if ($characteristic['name'] == 'Валюта продажи') {
                if ($characteristic['value'] == 'доллар') {
                    $result['currency_id'] = 3;
                }

            }
            if ($characteristic['name'] == 'Сезон') {
                if (!empty($characteristic['value'])) {
                    if (isset($this->getSeasonData($characteristic['value'])->name)) {
                        $result['season'] = $this->getSeasonData($characteristic['value'])->name;
                    } else {
                        $result['errors'][$characteristic['name']] = 'Не правильный';
                        $result['hasError'] = true;
                    }
                } else {
                    $result['errors'][$characteristic['name']] = "Пустой";
                    $result['hasError'] = true;
                }

            }


        }
        if (!isset($result['price'])) {
            $result['hasError'] = true;
            $result['errorMessages']['Цена'] = 'Не найдена.';
        }


        return $result;
    }

    private function getSeasonData__($id)
    {
        $result = [];
        $id = mb_strtolower($id);
        if ($id == 'демисезон') {
            $result = ['name' => 'Весна-Осень', 'id' => 8];
        } elseif ($id == 'лето') {
            $result = ['name' => 'Лето', 'id' => 4];
        } elseif ($id == 'зима') {
            $result = ['name' => 'Зима', 'id' => 2];
        } else {
            echo('SEASION: ' . $id);
        }
        return (object)$result;
    }


    public function buildPathToTempFile($fileName, $dir)
    {
        self::log('start buildPathToTempFile');
        $dir = str_replace($this->replacesDirsName, '', $dir);
        $dir = mb_strtolower($dir);
        if (!$dir && !$fileName) {
            return false;
        }
        if (!file_exists(\Yii::getAlias($this->tempDirectory) . DIRECTORY_SEPARATOR . $dir)) {
            FileHelper::createDirectory(\Yii::getAlias($this->tempDirectory) . DIRECTORY_SEPARATOR . $dir, $mode = 0775, $recursive = true);
        }
        $fullFileName = $fileName;

        $tmp = explode('/', $fileName);
        $fileName = end($tmp);
        $newFilePath = \Yii::getAlias($this->tempDirectory) . DIRECTORY_SEPARATOR . $dir . DIRECTORY_SEPARATOR . $fileName;


        $fh = fopen($newFilePath, 'w');
        $client = new Client([
            'transport' => 'yii\httpclient\CurlTransport'
        ]);
        $response = $client->createRequest()
            ->setMethod('GET')
            ->setUrl(str_replace(" ", "%20", $fullFileName))
            ->setOutputFile($fh)
            ->send();

        self::log('end buildPathToTempFile');
        if ($response->isOk) {
            // print_r($response);die;
            return $newFilePath;
        } else {
            return false;
        }

    }

    public static function log($mssage)
    {
        Yii::info($mssage);
    }

    public function actionExportContacts()
    {
        $this->fs = new ForsageStudio();
        $suppliers = $this->fs->getSuppliers();

        foreach ($suppliers['suppliers'] as $supplier) {
            $list[] = [$supplier['company'], str_replace('+', '', CMS::phoneFormat($supplier['phone'])), $supplier['phone'], $supplier['email'], $supplier['address']];
        }
        asort($list);
        $fp = fopen(Yii::getAlias('@runtime/') . 'suppliers_contact.csv', 'w');
        fputcsv($fp, ['Имя', 'Телефон', 'Телефон формат', 'E-mail', 'Адрес'], ';');
        foreach ($list as $fields) {
            fputcsv($fp, $fields, ';');
        }
        fclose($fp);
    }


    public function actionTest()
    {
        $list = [];
        $suppliers = $this->fs->getSuppliers();

        if ($suppliers['success'] = true) {
            $count = count($suppliers['suppliers']);
            $i = 0;
            Console::startProgress($i, $count, ' - ', 100);
            foreach ($suppliers['suppliers'] as $supplier) {
                $products = $this->fs->getSupplierProductIds($supplier['id'], ['quantity' => 1]);
                foreach ($products as $product) {
                    $test = $this->fs->getProduct($product);
                    /*Yii::$app->queue->push(new ProductQueue2([
                        'product' => $test->product,
                    ]));*/
                    $test->execute();
                }
                Console::updateProgress($i, $count, ' - ');
                $i++;
            }
            Console::endProgress(false);
        }

        /*$products = $this->fs->getSupplierProductIds(503, ['quantity' => 1]);
        //print_r($products);die;
        foreach ($products as $product) {
            $test = $this->fs->getProduct($product);
            Yii::$app->queue->push(new ProductQueue2([
                'product' => $test->product,
            ]));
        }*/


    }

    public function actionDiffSupplier()
    {

        $suppliers = $this->fs->getSuppliers();
        $cur_suppliers = Supplier::find()->all();
        $forsage_list = [];
        $cur_forsage_list = [];
        foreach ($suppliers['suppliers'] as $supplier) {

            $forsage_list[] = $supplier['id'];
        }

        foreach ($cur_suppliers as $supplier) {
            if ($supplier->forsage_id) {
                $cur_forsage_list[] = $supplier->forsage_id;
            }
        }

        //$res1 = array_intersect($forsage_list, $cur_forsage_list);
        $res2 = array_diff($cur_forsage_list, $forsage_list);
        foreach ($res2 as $supplier_id) {
            $sup = Supplier::findOne(['forsage_id' => $supplier_id]);
            if ($sup) {
                $products = Product::findAll(['supplier_id' => $sup->id]);
                foreach ($products as $product) {
                    $product->delete();
                }
                //$dels = Product::deleteAll(['supplier_id'=>$sup->id]); //не удаляет фотки
            }


        }
        //print_r($res2);
    }
    public function actionNoImg()
    {
        $products = Product::find()->limit(10000)->offset(40000)->all();
        foreach ($products as $product){
            if(!$product->getImages()->count()){
                //echo Url::to($product->getUrl()).PHP_EOL;
                $ff = $this->fs->getProduct($product->forsage_id);

                  if($ff){
                      $ff->execute();
                  }
            }
        }
    }
    public function actionRemoveImg()
    {
        $files = glob(Yii::getAlias('@uploads/store/product/*'));
        foreach ($files as $file) {
            if (is_dir($file)) {
                echo $file . PHP_EOL;
                $product = Product::findOne(basename($file));
                if (!$product) {
                    echo 'remove dir ' . $file . PHP_EOL;
                    BaseFileHelper::removeDirectory($file);
                }

            }
        }


        $filesAssets = glob(Yii::getAlias('@web/assets/product/*'));
        foreach ($filesAssets as $fileAsset) {
            if (is_dir($fileAsset)) {
                echo $fileAsset . PHP_EOL;
                $product = Product::findOne(basename($fileAsset));
                if (!$product) {
                    echo 'remove dir ' . $fileAsset . PHP_EOL;
                    BaseFileHelper::removeDirectory($fileAsset);
                }

            }
        }
    }

}

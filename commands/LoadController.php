<?php

namespace panix\mod\forsage\commands;

use panix\mod\forsage\components\ProductByIdQueue;
use panix\mod\forsage\components\ProductQueue;
use panix\mod\shop\models\AttributeOption;
use panix\mod\shop\models\Brand;
use panix\mod\shop\models\Category;
use panix\mod\shop\models\ProductAttributesEav;
use panix\mod\shop\models\ProductCategoryRef;
use panix\mod\shop\models\ProductImage;
use panix\mod\shop\models\Supplier;
use Yii;
use panix\mod\forsage\components\ForsageStudio;
use panix\engine\CMS;
use panix\engine\console\controllers\ConsoleController;
use panix\mod\shop\models\Attribute;
use panix\mod\shop\models\Product;
use panix\mod\shop\components\ExternalFinder;
use yii\base\ErrorException;
use yii\console\ExitCode;
use yii\console\widgets\Table;
use yii\helpers\BaseFileHelper;
use yii\helpers\Console;
use yii\helpers\FileHelper;
use yii\httpclient\Client;


ignore_user_abort(1);
set_time_limit(0);

/**
 * Class LoadController
 * @property ExternalFinder $external
 * @package panix\mod\forsage\commands
 */
class LoadController extends ConsoleController
{
    public $tempDirectory = '@runtime/forsage';
    /**
     * @var ForsageStudio
     */
    private $fs;

    public function beforeAction($action)
    {
        if (!extension_loaded('intl')) {
            throw new ErrorException('PHP Extension intl not active.');
        }
        $forsageClass = Yii::$app->getModule('forsage')->forsageClass;
        $this->fs = new $forsageClass;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Информация о товаре: "forsage/load/product <id>"
     * @param $id
     * @param $delete Delete before product
     * @return bool
     */
    public function actionProduct($id, $delete = 0)
    {
        if ($delete) {
            $p = Product::findOne(['forsage_id' => $id]);
            $p->delete();
        }
        $product = $this->fs->getProduct($id);
        //print_r($product);die;
        if ($product) {
            $response = $product->execute();
        } else {
            echo 'no open product';
        }
        return $response;
    }

    /**
     * Изменение товаров
     * @param int $diff Example milliseconds "86400" (Default 3600 hour)
     */
    public function actionChanges($diff = 3600)
    {
        $diff = eval('return ' . $diff . ';');
        $response = $this->fs->getChanges($diff);

        if ($response) {
            $count = count($response['product_ids']);
            $i = 0;

            Console::startProgress($i, $count, ' - ', 100);
            foreach ($response['products'] as $index => $product) {
                $this->fs->product = $product;
                //print_r($this->fs);die;
                $result = $this->fs->execute();
                //print_r($result);
                /*$product = $this->fs->getProduct($product);
                if($product){
                    $product->execute();
                }*/
                $i++;
                Console::updateProgress($i, $count, ' - ');

            }
            Console::endProgress(false);
        }
    }

    public function actionChanges2($start = 3600, $end = 0)
    {
        $start = eval('return ' . $start . ';');
        $end = eval('return ' . $end . ';');
        //for CRON
        $end_date = time() - $end;
        $start_date = time() - $start;

        //products = "full" or "changes"
        $this->stdout('end: ' . date('Y-m-d H:i:s', $end_date) . PHP_EOL, Console::FG_GREEN);
        $this->stdout('start: ' . date('Y-m-d H:i:s', $start_date) . PHP_EOL, Console::FG_GREEN);
        $this->stdout('Loading...' . PHP_EOL, Console::FG_GREEN);

        $response = $this->fs->getChanges2($start_date, $end_date);

        if ($response) {
            $count = count($response['product_ids']);
            $i = 0;

            Console::startProgress($i, $count, ' - ', 100);
            foreach ($response['product_ids'] as $index => $product) {
                $product2 = $this->fs->getProduct($product);
                if ($product2) {
                    $product2->execute();
                }
                $i++;
                Console::updateProgress($i, $count, $product . ' - ');

            }
            Console::endProgress(false);
        }
    }

    /**
     * Изменение товаров (forsage/load/changes-supplier <SUPPLIER_ID> <START> <END> --interactive=1|0)
     *
     * @param int $supplier Forsage supplier id
     * @param int $start Example milliseconds "86400 or 3600*2" (Default 3600)
     * @param int $end Example milliseconds "86400 or 3600*2" (Default 0) Furmula ($end - $start)
     */
    public function actionChangesSupplier($supplier, $start = 3600, $end = 0)
    {
        $start = eval('return ' . $start . ';');
        $end = eval('return ' . $end . ';');
        $end_date = time() + $end;
        $start_date = time() - $start;

        //$this->stdout('Current date: ' . date('Y-m-d H:i:s', time()).PHP_EOL, Console::FG_BLUE);
        //$this->stdout('Start date: ' . date('Y-m-d H:i:s', $start_date).PHP_EOL, Console::FG_PURPLE);
        //$this->stdout('End date: ' . date('Y-m-d H:i:s', $end_date).PHP_EOL, Console::FG_PURPLE);

        $table = new Table();


        echo $table //->setHeaders(['Current date', 'Start date', 'End date'])
        ->setRows([
            ['Current date', date('Y-m-d H:i:s', time())],
            ['Start date', date('Y-m-d H:i:s', $start_date)],
            ['End date', date('Y-m-d H:i:s', $end_date)],
        ])
            ->run();

        $confirmMsg = '';
        $confirmMsg .= "Starting confirm: says (yes|no)\r\n";

        // confirm
        $confirm = $this->confirm($confirmMsg, false);


        if ($confirm) {
            $response = $this->fs->getChanges($start, $end);
            if ($response) {
                $count = Product::find()->where(['forsage_id' => $response['product_ids']])->count();
                $i = 0;

                Console::startProgress($i, $count, ' - ', 100);
                foreach ($response['products'] as $index => $item) {
                    if ($item['supplier']['id'] == $supplier) {
                        $this->fs->product = $item;
                        $result = $this->fs->execute();
                        $i++;
                        Console::updateProgress($i, $count, $item['vcode'] . ' - ');
                    }
                }
                Console::endProgress(false);
            }
        } else {
            echo "\r\n";
            $this->stdout("--- Cancelled! ---\r\nYou can specify the paths using:");
            echo "\r\n\r\n";
            $this->stdout("    php cmd forsage/load/<action> <supplier_id> --interactive=1|0", Console::FG_BLUE);
            echo "\r\n";

            return ExitCode::OK;
        }

    }


    public function actionProducts($start = 3600, $end = 0)
    {
        $start = eval('return ' . $start . ';');
        $end = eval('return ' . $end . ';');
        $end_date = time() - $end;
        $start_date = time() - $start;

        $this->stdout('start: ' . date('Y-m-d H:i:s', $start_date) . PHP_EOL, Console::FG_GREEN);
        $this->stdout('end: ' . date('Y-m-d H:i:s', $end_date) . PHP_EOL, Console::FG_GREEN);
        $this->stdout('Loading...' . PHP_EOL, Console::FG_GREEN);

        $response = $this->fs->getProducts($start, $end);

        if ($response) {
            $i = 0;
            $count = count($response);
            Console::startProgress($i, $count, ' - ', 100);
            foreach ($response as $index => $item) {
                $this->fs->product = $item;
                $execute = $this->fs->execute();
                $i++;
                Console::updateProgress($i, $count, $item['id'] . ' - ');
            }
            Console::endProgress(false);
        } else {
            echo 'response empty';
        }
    }

    /**
     * Получить все товары поставщика forsage/load/supplier-products 123
     * @param $id
     */
    public function actionSupplierProducts($id)
    {
        $response = $this->fs->getSupplierProductIds($id, ['quantity' => 1]);

        if ($response) {

            $count = count($response);
            $i = 0;
            Console::startProgress($i, $count, ' - ', 100);
            foreach ($response as $index => $item) {
                $product = $this->fs->getProduct($item);
                self::log('get product');
                $product->execute();
                self::log('end product');
                $i++;
                Console::updateProgress($i, $count, ' - ');
            }
            Console::endProgress(false);
        }

    }


    public static function log($mssage)
    {
        Yii::info($mssage);
    }

    /**
     * Экспорт всех поставщиков их контактов
     * @param string $delimiter default ";"
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    public function actionExportContacts($delimiter = ';')
    {
        $suppliers = $this->fs->getSuppliers();

        foreach ($suppliers as $supplier) {
            $list[] = [$supplier['company'], str_replace('+', '', CMS::phoneFormat($supplier['phone'])), $supplier['phone'], $supplier['email'], $supplier['address']];
        }
        asort($list);
        $fp = fopen(Yii::getAlias('@runtime/') . 'suppliers_contact.csv', 'w');
        fputcsv($fp, ['Имя', 'Телефон', 'Телефон формат', 'E-mail', 'Адрес'], $delimiter);
        foreach ($list as $fields) {
            fputcsv($fp, $fields, $delimiter);
        }
        fclose($fp);
    }

    public function _actionRefbooks()
    {
        $refbooks = $this->fs->getRefbookCharacteristics();
        foreach ($refbooks as $ref) {
            $attribute = Attribute::findOne(['title_ru' => $ref['name']]);
            if ($attribute) {

                if ($ref['descriptions']) {
                    $attribute->title_uk = $ref['descriptions'][1]['name'];
                    $attribute->title_ru = $ref['descriptions'][0]['name'];
                } else {
                    $attribute->title_uk = $ref['name'];
                    $attribute->title_ru = $ref['name'];
                }

                $attribute->forsage_id = $ref['id'];
                $attribute->save(false);

                /*foreach ($ref['values'] as $value) {
                    $option = AttributeOption::findOne(['value' => $value['value']]);
                    if ($option) {
                        if (isset($value['descriptions'][1])) {
                            $option->value = $value['descriptions'][0]['name'];
                            $option->value_uk = (isset($value['descriptions'][1])) ? $value['descriptions'][1]['name'] : $value['descriptions'][0]['name'];
                            //$option->forsage_id = $value['id'];
                            $option->save(false);

                        } else {
                            $option->value = $value['value'];
                            $option->value_uk = $value['value'];
                            //$option->forsage_id = $value['id'];
                            $option->save(false);
                        }
                    }
                }*/
            }
        }
    }

    public function actionTest()
    {
        $list = [];
        $suppliers = $this->fs->getSuppliers();

        if ($suppliers['success'] = true) {
            $count = count($suppliers['suppliers']);
            $i = 0;
            Console::startProgress($i, $count, ' - ', 100);
            foreach ($suppliers['suppliers'] as $supplier) {
                $products = $this->fs->getSupplierProductIds($supplier['id'], ['quantity' => 1]);
                foreach ($products as $product) {
                    $test = $this->fs->getProduct($product);
                    $test->execute();
                }
                Console::updateProgress($i, $count, ' - ');
                $i++;
            }
            Console::endProgress(false);
        }
    }

    public function actionDiffSupplier()
    {

        $suppliers = $this->fs->getSuppliers();
        $cur_suppliers = Supplier::find()->where('`forsage_id` IS NOT NULL')->all();

        $forsage_list = [];
        $cur_forsage_list = [];
        foreach ($suppliers['suppliers'] as $supplier) {

            $forsage_list[] = $supplier['id'];
        }

        foreach ($cur_suppliers as $supplier) {
            if ($supplier->forsage_id) {
                $cur_forsage_list[] = $supplier->forsage_id;
            }
        }

        //$res1 = array_intersect($forsage_list, $cur_forsage_list);
        $res2 = array_diff($cur_forsage_list, $forsage_list);

        foreach ($res2 as $supplier_id) {
            $sup = Supplier::findOne(['forsage_id' => $supplier_id]);
            if ($sup) {
                $products = Product::findAll(['supplier_id' => $sup->id]);
                foreach ($products as $product) {
                    $product->delete();
                }
                $sup->delete();
            }

        }
    }

    public function actionNoImg()
    {
        $products = Product::find()->limit(10000)->offset(40000)->all();
        foreach ($products as $product) {
            if (!$product->getImages()->count()) {
                //echo Url::to($product->getUrl()).PHP_EOL;
                $ff = $this->fs->getProduct($product->forsage_id);

                if ($ff) {
                    $ff->execute();
                }
            }
        }
    }

    public function actionRemoveImg()
    {
        $files = glob(Yii::getAlias('@uploads/store/product/*'));
        foreach ($files as $file) {
            if (is_dir($file)) {
                echo $file . PHP_EOL;
                $product = Product::findOne(basename($file));
                if (!$product) {
                    echo 'remove dir ' . $file . PHP_EOL;
                    BaseFileHelper::removeDirectory($file);
                }

            }
        }


        $filesAssets = glob(Yii::getAlias('@web/assets/product/*'));
        foreach ($filesAssets as $fileAsset) {
            if (is_dir($fileAsset)) {
                echo $fileAsset . PHP_EOL;
                $product = Product::findOne(basename($fileAsset));
                if (!$product) {
                    echo 'remove dir ' . $fileAsset . PHP_EOL;
                    BaseFileHelper::removeDirectory($fileAsset);
                }

            }
        }
    }

    /**
     * Only if enable DEBUG
     */
    public function actionClearDb()
    {
        if (YII_DEBUG) {
            $db = Yii::$app->db;
            //$db->createCommand()->truncateTable('{{%forsage_studio}}')->execute();
            /*$db->createCommand()->truncateTable(ProductImage::tableName())->execute();
            $db->createCommand()->truncateTable(ProductCategoryRef::tableName())->execute();
            $db->createCommand()->truncateTable(ProductAttributesEav::tableName())->execute();

            $db->createCommand()->truncateTable(AttributeOption::tableName())->execute();
            $db->createCommand()->truncateTable(Attribute::tableName())->execute();
            $db->createCommand()->truncateTable(Category::tableName())->execute();*/

            if ($db->createCommand('SELECT * FROM ' . Product::tableName() . ' WHERE forsage_id IS NOT NULL')->query()->count()) {
                $db->createCommand()->truncateTable(Product::tableName() . ' WHERE forsage_id IS NOT NULL')->execute();
            }
            if ($db->createCommand('SELECT * FROM ' . Brand::tableName() . ' WHERE forsage_id IS NOT NULL')->query()->count()) {
                $db->createCommand()->truncateTable(Brand::tableName() . ' WHERE forsage_id IS NOT NULL')->execute();
            }
            if ($db->createCommand('SELECT * FROM ' . Supplier::tableName() . ' WHERE forsage_id IS NOT NULL')->query()->count()) {
                $db->createCommand()->truncateTable(Supplier::tableName())->execute();
            }


            /*$model = new Category;
            $model->name = 'Каталог продукции';
            $model->lft = 1;
            $model->rgt = 2;
            $model->depth = 1;
            $model->slug = 'root';
            $model->full_path = '';
            if ($model->validate()) {
                $model->saveNode();
            }*/
        } else {
            echo 'YII_DEBUG disabled!.';
        }
    }

    public function actionQueueAll($quantity = 1)
    {
        $confirmMsg = '';
        $confirmMsg .= "Starting confirm: says (yes|no)\r\n";
        $confirm = $this->confirm($confirmMsg, false);
        if ($confirm) {
            $suppliers = $this->fs->getSuppliers();
            if(!$suppliers){
                echo 'ERROR!';
            }
            foreach ($suppliers as $supplier) {
                $i = 0;
                $rows = [];
                $products = $this->fs->getSupplierProductIds($supplier['id'], ['quantity' => $quantity]);
                $count = count($products);
                foreach ($products as $product) {
                    $job = new ProductByIdQueue;
                    $job->id = $product;
                    $rows[] = [
                        'default',
                        serialize($job),
                        time(),
                        120,
                        1024
                    ];
                    $i++;
                }
                Yii::$app->db->createCommand()->batchInsert(Yii::$app->queue->tableName, [
                    'channel',
                    'job',
                    'pushed_at',
                    'ttr',
                    'priority'
                ], $rows)->execute();
            }

        } else {
            echo "\r\n";
            $this->stdout("--- Cancelled! ---\r\nYou can specify the paths using:");
            echo "\r\n\r\n";
            $this->stdout("    php cmd forsage/load/queue-all --interactive=1|0", Console::FG_BLUE);
            echo "\r\n";

            return ExitCode::OK;
        }

    }

}

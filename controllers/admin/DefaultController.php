<?php

namespace panix\mod\forsage\controllers\admin;

use panix\engine\CMS;
use panix\mod\banner\models\BannerSearch;
use panix\mod\forsage\components\ForsageStudio;
use panix\mod\forsage\components\ProductByIdQueue;
use panix\mod\forsage\components\ProductDeleteQueue;
use panix\mod\forsage\components\ProductIdQueue;
use panix\mod\forsage\models\ChangesForm;
use panix\mod\shop\models\Product;
use panix\mod\shop\models\search\SupplierSearch;
use panix\mod\shop\models\Supplier;
use Yii;
use panix\engine\controllers\AdminController;
use panix\mod\forsage\models\SettingsForm;
use yii\data\ArrayDataProvider;

class DefaultController extends AdminController
{

    public $icon = '';
    /**
     * @var ForsageStudio
     */
    public $fs;

    public function beforeAction($action)
    {
        $forsageClass = Yii::$app->getModule('forsage')->forsageClass;
        $this->fs = new $forsageClass;

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionSuppliers()
    {
        $this->pageName = Yii::t('shop/admin', 'SUPPLIER');
        $this->view->params['breadcrumbs'] = [
            [
                'label' => Yii::t('forsage/default', 'MODULE_NAME'),
                'url' => ['suppliers']
            ],
            $this->pageName
        ];

        //$searchModel = new SupplierSearch();
        //$dataProvider = $searchModel->search(Yii::$app->request->getQueryParams());

        $suppliers = $this->fs->getSuppliers();

        $dataProvider = new ArrayDataProvider([
            'allModels' => $suppliers,
            'sort' => [
                'attributes' => ['id', 'company', 'email'],
            ],
            'pagination' => [
                'pageSize' => 50,
            ],
        ]);

        return $this->render('suppliers', [
            'dataProvider' => $dataProvider,
            // 'searchModel' => $searchModel
        ]);
    }

    public function actionChanges()
    {
        $this->pageName = 'Импорт за период';
        $this->view->params['breadcrumbs'] = [
            /*[
                'label' => Yii::t('forsage/default', 'MODULE_NAME'),
                'url' => ['suppliers']
            ],*/
            $this->pageName
        ];
        $post = Yii::$app->request->post();
        $ids = [];
        $model = new ChangesForm();
        $model->date = date('Y-m-d');
        if ($model->load(Yii::$app->request->post())) {
            if ($model->validate()) {
                $date_utc = new \DateTime($model->date . ' ' . $model->time);
                $start_date = $date_utc->format('U');
                $end_date = $date_utc->format('U') + (3600 * 2);

                if (isset($post['type'])) {
                    if ($post['type'] == 'new') {
                        $products = $this->fs->getProducts($start_date, $end_date, ['with_descriptions' => 0]);
                        if ($products) {
                            foreach ($products as $product) {
                                $ids[] = $product['id'];
                            }
                        }
                    } else {
                        $products = $this->fs->getChanges($start_date, $end_date);
                        if (isset($products['success'])) {
                            foreach ($products['product_ids'] as $product) {
                                $ids[] = $product;
                            }
                        }
                    }
                }
                if ($ids) {
                    foreach ($ids as $id) {
                        Yii::$app->queue->push(new ProductByIdQueue([
                            'id' => $id,
                        ]));
                    }
                }
                $total = count($ids);
                Yii::$app->session->setFlash('success', ChangesForm::t('SUCCESS_MSG', [
                    $total, date('Y-m-d H:i', $start_date), date('Y-m-d H:i', $end_date)
                ]));
                return $this->refresh();
            }
        }

        return $this->render('changes', [
            'model' => $model
        ]);
    }

    public function actionSupplierLoadProducts($id, $name)
    {
        $queue = Yii::$app->queue;
        $products = $this->fs->getSupplierProductIds($id, ['quantity' => 1]);
        if ($products) {
            $rows = [];
            Yii::$app->session->setFlash('success', Yii::t('forsage/default', 'RELOAD_SUPPLIER', [
                count($products),
                $name
            ]));
            foreach ($products as $product) {
                $job = new ProductByIdQueue(['id' => $product, 'images' => true, 'attributes' => true]);
                if (Yii::$app->db->driverName == 'pgsql') {
                    $queue->push($job);
                } else {
                    $rows[] = [
                        'default',
                        $queue->serializer->serialize($job),
                        time(),
                        120,
                        1024
                    ];
                }
            }
            Yii::$app->db->createCommand()->batchInsert($queue->tableName, [
                'channel',
                'job',
                'pushed_at',
                'ttr',
                'priority'
            ], $rows)->execute();

        } else {
            Yii::$app->session->setFlash('error', 'Error!');
        }

        return $this->redirect('suppliers');
    }


    public function actionSupplierDelete($id)
    {
        $supplier = Supplier::findOne(['forsage_id' => $id]);

        $table = Product::tableName();
        $products = Product::getDb()->createCommand("SELECT forsage_id FROM {$table} WHERE supplier_id={$supplier->id}")->queryAll();

        $rows = [];
        $queue = Yii::$app->queue;
        $count = count($products);
        if ($products) {
            foreach ($products as $product) {
                $job = new ProductDeleteQueue(['forsage_id' => $product['forsage_id']]);
                $rows[] = [
                    'default',
                    $queue->serializer->serialize($job),
                    time(),
                    120,
                    1024
                ];
            }

            Yii::$app->db->createCommand()->batchInsert($queue->tableName, [
                'channel',
                'job',
                'pushed_at',
                'ttr',
                'priority'
            ], $rows)->execute();

            if ($supplier && $count) {
                $supplier->delete();
            }

            Yii::$app->session->setFlash('success', Yii::t('forsage/default', 'Deleted success ' . $count));
        }
        return $this->redirect('suppliers');
    }
}
